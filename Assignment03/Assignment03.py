# -*- coding: utf-8 -*-
"""Assignment03_angela_vieira.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EnPTbl0xLE8vpR6O11NkUFqs_GjV5NlG
"""

#@title Imports
import tensorflow as tf
import tensorflow.keras as keras
import tensorflow.keras.backend as K
import numpy as np 
import random, os
import pandas as pd
from math import floor, ceil
from pylab import rcParams
from time import gmtime, strftime
from sklearn.model_selection import train_test_split
from random import choice

#@title Tratando os dados


params = ['ncars', 'nloads', 
          '1nwhells', '1lenght', '1shape', '1loads', '1lshape',
          '2nwhells', '2lenght', '2shape', '2loads', '2lshape',
          '3nwhells', '3lenght', '3shape', '3loads', '3lshape',
          '4nwhells', '4lenght', '4shape', '4loads', '4lshape',
          
          'rectorec', 'rectotri', 'rectohex', 'rectocircle', 'tritotri', 'tritohex', 'tritocir','hextohex','hextocir','cirtocir', 'class']

data = pd.read_csv("/content/trains-transformed.data", delimiter=' ', header=None, names=params)

trains= pd.DataFrame(data[['ncars', 'nloads', 
          '1nwhells', '1lenght', '1shape', '1loads', '1lshape',
          '2nwhells', '2lenght', '2shape', '2loads', '2lshape',
          '3nwhells', '3lenght', '3shape', '3loads', '3lshape',
          '4nwhells', '4lenght', '4shape', '4loads', '4lshape',
          
          'rectorec', 'rectotri', 'rectohex', 'rectocircle', 'tritotri', 'tritohex', 'tritocir','hextohex','hextocir','cirtocir', 'class']]).head()
trains.index +=1
trains = (trains.rename_axis('train').reset_index()).replace({
                                                                                  'class' : {'east':-1, 'west':1,'-':0},
                                                                                  '1lenght':{'long':1, 'short':-1,'-':0},
                                                                                  '2lenght':{'long':1, 'short':-1,'-':0},
                                                                                  '3lenght':{'long':1, 'short':-1,'-':0},
                                                                                  '4lenght':{'long':1, 'short':-1,'-':0},
                                                                                  '1nwhells':{'-':0},
                                                                                  '2nwhells':{'-':0},
                                                                                  '3nwhells':{'-':0},
                                                                                  '4nwhells':{'-':0},
                                                                                  '1lshape':{'circlelod':1, 'hexagonlod':2, 'rectanglod':3, 'trianglod':4,'-':0},
                                                                                  '2lshape':{'circlelod':1, 'hexagonlod':2, 'rectanglod':3, 'trianglod':4,'-':0},
                                                                                  '3lshape':{'circlelod':1, 'hexagonlod':2, 'rectanglod':3, 'trianglod':4,'-':0},
                                                                                  '4lshape':{'circlelod':1, 'hexagonlod':2, 'rectanglod':3, 'trianglod':4,'-':0},
                                                                                  '1shape':{'closedrect':1, 'dblopnrect':2, 'ellipse':3, 'engine':4,'hexagon':5, 'jaggedtop':6, 'openrect':7, 'opentrap':8, 'slopetop':9, 'ushaped':10,'-':0},
                                                                                  '2shape':{'closedrect':1, 'dblopnrect':2, 'ellipse':3, 'engine':4,'hexagon':5, 'jaggedtop':6, 'openrect':7, 'opentrap':8, 'slopetop':9, 'ushaped':10,'-':0},
                                                                                  '3shape':{'closedrect':1, 'dblopnrect':2, 'ellipse':3, 'engine':4,'hexagon':5, 'jaggedtop':6, 'openrect':7, 'opentrap':8, 'slopetop':9, 'ushaped':10,'-':0},
                                                                                  '4shape':{'closedrect':1, 'dblopnrect':2, 'ellipse':3, 'engine':4,'hexagon':5, 'jaggedtop':6, 'openrect':7, 'opentrap':8, 'slopetop':9, 'ushaped':10,'-':0},
                                                                                  '1loads':{'-':0},
                                                                                  '2loads':{'-':0},
                                                                                  '3loads':{'-':0},
                                                                                  '4loads':{'-':0}
                                                                                  })


X = trains.drop(columns='class').astype(float)



y = trains['class'].astype(float)


X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.1,
                                                    random_state=123)

x_train_num_cars = X_train[['train','ncars']]
x_train_num_loads = X_train[['train','nloads']]
x_train_num_wheels = X_train[['train','ncars','1nwhells','2nwhells','3nwhells','4nwhells']]
x_train_num_length = X_train[['train','ncars','1lenght','2lenght','3lenght','4lenght']]
x_train_num_shape = X_train[['train','ncars','1shape','2shape','3shape','4shape']]
x_train_car_loads = X_train[['train','ncars','1loads','1loads','3loads','4loads']]
x_train_num_load_shape = X_train[['train','ncars','1lshape','2lshape','3lshape','4lshape']]

x_train_next_rec = X_train[['train','ncars','rectotri','rectorec', 'rectohex', 'rectocircle']]
x_train_next_crc = X_train[['train','ncars','rectocircle','cirtocir','tritocir','hextocir']]
x_train_next_tri = X_train[['train','ncars','tritotri','tritohex', 'tritocir','rectotri']]
x_train_next_hex = X_train[['train','ncars','hextohex','hextocir','tritohex','rectohex']]

x_test_train_num_cars = X_test[['train','ncars']]
x_test_train_num_loads = X_test[['train','nloads']]
x_test_train_num_wheels = X_test[['train','ncars','1nwhells','2nwhells','3nwhells','4nwhells']]
x_test_train_num_length = X_test[['train','ncars','1lenght','2lenght','3lenght','4lenght']]
x_test_train_num_shape = X_test[['train','ncars','1shape','2shape','3shape','4shape']]
x_test_train_car_loads = X_test[['train','ncars','1loads','1loads','3loads','4loads']]
x_test_train_num_load_shape = X_test[['train','ncars','1lshape','2lshape','3lshape','4lshape']]

x_test_train_next_rec = X_test[['train','ncars','rectotri','rectorec', 'rectohex', 'rectocircle']]
x_test_train_next_crc = X_test[['train','ncars','rectocircle','cirtocir','tritocir','hextocir']]
x_test_train_next_tri = X_test[['train','ncars','tritotri','tritohex', 'tritocir','rectotri']]
x_test_train_next_hex = X_test[['train','ncars','hextohex','hextocir','tritohex','rectohex']]

'''
    


print(x_train_num_cars)
print(x_train_num_loads)

print(x_train_num_wheels)
print(x_train_num_length)
print(x_train_num_shape)
print(x_train_car_loads)
print(x_train_num_load_shape)

print(x_train_next_rec)
print(x_train_next_crc)
print(x_train_next_tri)
print(x_train_next_hex)


prediction = model.predict(X_test[:1])
print(X_test[:1], " prediction shape:", prediction)

direction = -1

if ( prediction > 0.5 and prediction < 1.0) :
  direction = 1

print(direction)

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.10, random_state=42)

'''

#@title Auxiliar Functions
taxa_aprendizado = 0.3

# Codificar one-hot
def encode(series):
    return  pd.get_dummies(series.astype(str))

# Define the bipolar semilinear activation function
def bipolar_semilinear(x):
  return(2 / (1 + K.exp(-x)) - 1)

X_train_results = [11]

#@title Definition of neural network
def create_neural_network(db_x_train, db_x_test):
  

    tam = len(db_x_train.axes[1])
    
    inputs = keras.Input(shape=(tam,), name="digits")
    x = tf.keras.layers.Dense(20, activation=bipolar_semilinear, name="dense_1")(inputs)
    #x = tf.keras.layers.Dense(9, activation="relu", name="dense_2")(x)
    outputs = tf.keras.layers.Dense(1, activation=bipolar_semilinear, name="predictions")(x)

    
    model = keras.Model(inputs=inputs, outputs=outputs)

    model.compile(loss=keras.losses.binary_crossentropy,
                optimizer=keras.optimizers.Adam(lr=taxa_aprendizado),
                metrics=['accuracy'],run_eagerly=True)

    batch_size = 32  # X_train 535 / 32 = 16.71 (então são 17 batches de 32)
    epochs = 2
    #print(db_x_train.shape,y_train.shape, db_x_test.shape, y_test.shape)
    history  =  model.fit(db_x_train, y_train,
                        epochs=epochs,
                        verbose=1,
                        validation_data=(db_x_test, y_test))

    #print("Evaluate model on test data")
    results = model.evaluate(db_x_test, y_test, batch_size=128)
    #print("test loss, test acc:", results)

    # Generate a prediction using model.predict() 
    # and calculate it's shape:
    #print("Generate a prediction")
    prediction = model.predict(db_x_test[:1])
    #print(X_test[:1], " prediction shape:", prediction)
    
    direction = 0

    results = [-1,1]
      
    if ( prediction >= 0.5 and prediction <= 1.0) :
      direction = 1
    elif ( prediction <= -0.5 and prediction >= -1.0) :
      direction = -1
    else:
      direction = choice(results) 

    layer_name = 'dense_1'
    layer = tf.keras.Model(inputs=model.input, outputs=model.get_layer(layer_name).output)

    return layer

#@title Creating 11 Neural Networks 


#models_prediction = np.array([11])



model = create_neural_network(x_train_num_loads,x_test_train_num_loads)

create_neural_network(x_train_num_wheels,x_test_train_num_wheels)

create_neural_network(x_train_num_length,x_test_train_num_length)

create_neural_network(x_train_num_shape,x_test_train_num_shape)

create_neural_network(x_train_car_loads,x_test_train_car_loads)

create_neural_network(x_train_num_load_shape,x_test_train_num_load_shape)

create_neural_network(x_train_next_rec,x_test_train_next_rec)

create_neural_network(x_train_next_tri,x_test_train_next_tri)

create_neural_network(x_train_next_crc,x_test_train_next_crc)

create_neural_network(x_train_next_hex,x_test_train_next_hex)


#metanetwork
inputs = model.output
x = tf.keras.layers.Dense(3, activation=bipolar_semilinear)(inputs)
output = tf.keras.layers.Dense(1, activation=bipolar_semilinear)(x)
meta_network = tf.keras.Model(inputs=inputs, outputs=output)

meta_network.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=taxa_aprendizado), metrics=['accuracy'])

meta_network.summary()