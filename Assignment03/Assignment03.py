# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EnPTbl0xLE8vpR6O11NkUFqs_GjV5NlG
"""

#@title Imports
import tensorflow as tf
import tensorflow.keras as keras
import numpy as np 
import random, os
import pandas as pd
from math import floor, ceil
from pylab import rcParams
from time import gmtime, strftime
from sklearn.model_selection import train_test_split

#@title Tratando os dados


params = ['ncars', 'nloads', 
          '1nwhells', '1lenght', '1shape', '1loads', '1lshape',
          '2nwhells', '2lenght', '2shape', '2loads', '2lshape',
          '3nwhells', '3lenght', '3shape', '3loads', '3lshape',
          '4nwhells', '4lenght', '4shape', '4loads', '4lshape',
          
          'rectorec', 'rectotri', 'rectohex', 'rectocircle', 'tritotri', 'tritohex', 'tritocir','hextohex','hextocir','cirtocir', 'class']

data = pd.read_csv("/content/trains-transformed.data", delimiter=' ', header=None, names=params)

x_train_num_cars = pd.DataFrame(data[['ncars']]).head().reset_index(drop=True)
x_train_num_loads = pd.DataFrame(data[['nloads']]).head()

x_train_num_wheels = pd.DataFrame(data[['ncars','1nwhells','2nwhells','3nwhells','4nwhells']]).head()
x_train_num_length = pd.DataFrame(data[['ncars','1lenght','2lenght','3lenght','4lenght']]).head()
x_train_num_shape = pd.DataFrame(data[['ncars','1shape','2shape','3shape','4shape']]).head()
x_train_car_loads = pd.DataFrame(data[['ncars','1loads','1loads','3loads','4loads']]).head()
x_train_num_load_shape = pd.DataFrame(data[['ncars','1lshape','2lshape','3lshape','4lshape']]).head()

x_train_rectorec = pd.DataFrame(data[['ncars','rectorec']]).head()
x_train_rectotri = pd.DataFrame(data[['ncars','rectotri']]).head()
x_train_rectocircle = pd.DataFrame(data[['ncars','rectocircle']]).head()
x_train_tritotri = pd.DataFrame(data[['ncars','tritotri']]).head()
x_train_tritohex = pd.DataFrame(data[['ncars','tritohex']]).head()
x_train_hextohex = pd.DataFrame(data[['ncars','hextohex']]).head()
x_train_hextocir = pd.DataFrame(data[['ncars','hextocir']]).head()
x_train_class = pd.DataFrame(data[['ncars','class']]).head()


#x_train_num_length = x_train_num_length.replace('short',-1).replace('long',1)//

'''


print(x_train_num_cars)
print(x_train_num_loads)

print(x_train_num_wheels)
print(x_train_num_length)
print(x_train_num_shape)
print(x_train_car_loads)
print(x_train_num_load_shape)

print(x_train_rectorec)
print(x_train_rectotri)
print(x_train_rectocircle)
print(x_train_tritotri)
print(x_train_tritohex)
print(x_train_hextohex)
print(x_train_hextocir)
print(x_train_class)



prediction = model.predict(X_test[:1])
print(X_test[:1], " prediction shape:", prediction)

direction = -1

if ( prediction > 0.5 and prediction < 1.0) :
  direction = 1

print(direction)

'''

#@title Neural Network num_car
taxa_aprendizado = 0.3

# Codificar one-hot
def encode(series):
    return  pd.get_dummies(series.astype(str))

dados = x_train_num_cars.sample(frac=1).reset_index(drop=True)


# Predicados
X = x_train_num_cars['ncars']

# Labels
y = encode(x_train_num_cars['ncars'])


X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.10, random_state=42)


inputs = keras.Input(shape=(1,), name="digits")
x = tf.keras.layers.Dense(32, activation="relu", name="dense_1")(inputs)
x = tf.keras.layers.Dense(9, activation="relu", name="dense_2")(x)
outputs = tf.keras.layers.Dense(1, activation= tf.keras.activations.tanh, name="predictions")(x)

model = keras.Model(inputs=inputs, outputs=outputs)

model.compile(loss=keras.losses.binary_crossentropy,
             optimizer=keras.optimizers.Adam(lr=taxa_aprendizado),
             metrics=['accuracy'])

batch_size = 32  # X_train 535 / 32 = 16.71 (então são 17 batches de 32)
epochs = 2

history  = model.fit(X_train, y_train,
                     epochs=epochs,
                     validation_data=(X_test, y_test))

#print("Evaluate model on test data")
results = model.evaluate(X_test, y_test, batch_size=128)
#print("test loss, test acc:", results)

# Generate a prediction using model.predict() 
# and calculate it's shape:
#print("Generate a prediction")
prediction = model.predict(X_test[:1])
print(X_test[:1], " prediction shape:", prediction)

direction = 0

if ( prediction >= 0.5 and prediction <= 1.0) :
  direction = 1

if ( prediction <= -0.5 and prediction >= -1.0) :
  direction = -1

print(direction)

